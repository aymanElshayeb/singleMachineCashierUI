// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/pos/domain/entities/cart.dart';
import 'features/pos/domain/entities/category.dart';
import 'features/pos/domain/entities/item.dart';
import 'features/pos/domain/entities/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1708404110679054306),
      name: 'Item',
      lastPropertyId: const IdUid(8, 6065112333793756882),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4708780500862436054),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5450862617689204637),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 978520186409556023),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 734743536217729863),
            name: 'kilo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5894502107167558780),
            name: 'category',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2948118200289166704),
            name: 'PLU_EAN',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1008449916144047837),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6065112333793756882),
            name: 'underCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7857985067883969500),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 2007284056031603827),
            name: 'underCart',
            targetId: const IdUid(5, 1909415043919664349))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8501882011040739098),
      name: 'Category',
      lastPropertyId: const IdUid(2, 2101120480420103568),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2059584490572689102),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 2101120480420103568),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'items', srcEntity: 'Item', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(4, 6572332675212592166),
      name: 'User',
      lastPropertyId: const IdUid(5, 5172567343623921935),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2211741253427651098),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 6101508782893672559),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 5089915989951087791),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1401316444396112938),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5172567343623921935),
            name: 'fullname',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1909415043919664349),
      name: 'Cart',
      lastPropertyId: const IdUid(5, 8762742603129317257),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7297964676050065295),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 8434989292390240412),
            name: 'items',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8762742603129317257),
            name: 'quantities',
            type: 29,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 1909415043919664349),
      lastIndexId: const IdUid(1, 7857985067883969500),
      lastRelationId: const IdUid(2, 2007284056031603827),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5254100010923290584],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6233241012927280592,
        149831004738434154,
        6950792149931096864
      ],
      retiredRelationUids: const [4511783247465554638],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Item: EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [object.underCategory],
        toManyRelations: (Item object) =>
            {RelInfo<Item>.toMany(2, object.id): object.underCart},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final unitOffset = fbb.writeString(object.unit);
          final PLU_EANOffset = fbb.writeString(object.PLU_EAN);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, unitOffset);
          fbb.addBool(3, object.kilo);
          fbb.addInt64(4, object.category);
          fbb.addOffset(5, PLU_EANOffset);
          fbb.addFloat64(6, object.price);
          fbb.addInt64(7, object.underCategory.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final PLU_EANParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final categoryParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final kiloParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Item(
              PLU_EAN: PLU_EANParam,
              name: nameParam,
              unit: unitParam,
              category: categoryParam,
              price: priceParam,
              kilo: kiloParam,
              id: idParam);
          object.underCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.underCategory.attach(store);
          InternalToManyAccess.setRelInfo<Item>(
              object.underCart, store, RelInfo<Item>.toMany(2, object.id));
          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              RelInfo<Item>.toOneBacklink(8, object.id,
                  (Item srcObject) => srcObject.underCategory): object.items
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addOffset(0, nameOffset);
          fbb.addInt64(1, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Category(name: nameParam, id: idParam);
          InternalToManyAccess.setRelInfo<Category>(
              object.items,
              store,
              RelInfo<Item>.toOneBacklink(
                  8, object.id, (Item srcObject) => srcObject.underCategory));
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final roleOffset = fbb.writeString(object.role);
          final passwordOffset = fbb.writeString(object.password);
          final fullnameOffset = fbb.writeString(object.fullname);
          fbb.startTable(6);
          fbb.addOffset(0, userNameOffset);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, roleOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, fullnameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final fullnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = User(
              id: idParam,
              userName: userNameParam,
              role: roleParam,
              password: passwordParam,
              fullname: fullnameParam);

          return object;
        }),
    Cart: EntityDefinition<Cart>(
        model: _entities[3],
        toOneRelations: (Cart object) => [],
        toManyRelations: (Cart object) => {},
        getId: (Cart object) => object.id,
        setId: (Cart object, int id) {
          object.id = id;
        },
        objectToFB: (Cart object, fb.Builder fbb) {
          final itemsOffset = fbb.writeString(object.items);
          final quantitiesOffset = fbb.writeListFloat64(object.quantities);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, itemsOffset);
          fbb.addOffset(4, quantitiesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final itemsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final quantitiesParam =
              const fb.ListReader<double>(fb.Float64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 12, []);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object =
              Cart(items: itemsParam, quantities: quantitiesParam, id: idParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// see [Item.name]
  static final name = QueryStringProperty<Item>(_entities[0].properties[1]);

  /// see [Item.unit]
  static final unit = QueryStringProperty<Item>(_entities[0].properties[2]);

  /// see [Item.kilo]
  static final kilo = QueryBooleanProperty<Item>(_entities[0].properties[3]);

  /// see [Item.category]
  static final category =
      QueryIntegerProperty<Item>(_entities[0].properties[4]);

  /// see [Item.PLU_EAN]
  static final PLU_EAN = QueryStringProperty<Item>(_entities[0].properties[5]);

  /// see [Item.price]
  static final price = QueryDoubleProperty<Item>(_entities[0].properties[6]);

  /// see [Item.underCategory]
  static final underCategory =
      QueryRelationToOne<Item, Category>(_entities[0].properties[7]);

  /// see [Item.underCart]
  static final underCart =
      QueryRelationToMany<Item, Cart>(_entities[0].relations[0]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[0]);

  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[1].properties[1]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.userName]
  static final userName = QueryStringProperty<User>(_entities[2].properties[0]);

  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[2].properties[1]);

  /// see [User.role]
  static final role = QueryStringProperty<User>(_entities[2].properties[2]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[2].properties[3]);

  /// see [User.fullname]
  static final fullname = QueryStringProperty<User>(_entities[2].properties[4]);
}

/// [Cart] entity fields to define ObjectBox queries.
class Cart_ {
  /// see [Cart.id]
  static final id = QueryIntegerProperty<Cart>(_entities[3].properties[0]);

  /// see [Cart.items]
  static final items = QueryStringProperty<Cart>(_entities[3].properties[1]);

  /// see [Cart.quantities]
  static final quantities =
      QueryDoubleVectorProperty<Cart>(_entities[3].properties[2]);
}
